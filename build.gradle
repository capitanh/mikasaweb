buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE'
    classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.2'
  }
}

plugins {
  id 'java'
  id 'org.unbroken-dome.test-sets' version '1.4.2'
  id 'eclipse-wtp'
  id 'org.springframework.boot' version '1.5.8.RELEASE'
  id 'war'
  id 'maven-publish'
}

repositories {
  jcenter()
}

war {
  manifest{
    attributes(
      "Implementation-Title": project.description,
      "Implementation-Version": version,
      "Build-date": new Date().format('dd-MM-yyyy HH:mm:ss'),
      "Build-by": System.properties.'user.name',
      "git-revision": "git rev-parse --short HEAD".execute().text.trim(),
      "git-branch": "git status -bs -u no".execute().text.trim()
    )
  }
}

//Integration tests config
testSets {
  integrationTest
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test
tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}
project.integrationTest {
  outputs.upToDateWhen { false }
}
tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}
test {
  afterTest { desc, result ->
    println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
    }
}
integrationTest {
  afterTest { desc, result ->
    println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
    }
}

dependencies {

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'com.h2database:h2:1.4.182'
  testCompile 'org.seleniumhq.selenium:selenium-server:3.7.1'

  integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
  integrationTestCompile 'com.h2database:h2:1.4.182'
  integrationTestCompile 'org.seleniumhq.selenium:selenium-server:3.7.1'

  compile 'org.webjars:bootstrap:3.3.0'
  compile 'mysql:mysql-connector-java:5.0.5'
  compile 'org.apache.tomcat:dbcp:6.0.53'
  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
}

/*
* Nexus Publishing Info
* Define following environment variables (local or inside jenkins config):
*   nexusUser: Nexus deployer username
*   nexusPassword: Nexus deployer password
*   nexusSnapshotsURL: Nexus Snapshots repo URL
*   nexusReleasesURL: Nexus Releases repo URL
* Usage: gradle publishSnapshotPublicationToNexusSnapshotsRepository (snapshots)
*        gradle publishReleasePublicationToNexusReleasesRepository (releases)
*/
publishing {
  def nexusUser = System.getenv('nexusUser')
  def nexusPassword = System.getenv('nexusPassword')
  def artifact = rootProject.name
  repositories {
    maven {
      name 'NexusSnapshots'
      url System.getenv('nexusSnapshotsURL')
      credentials {
        username nexusUser
        password nexusPassword
      }
    }
    maven {
      name 'NexusReleases'
      url System.getenv('nexusReleasesURL')
      credentials {
        username nexusUser
        password nexusPassword
      }
    }
  }
  publications {
    snapshot(MavenPublication) {
      artifactId artifact
      from components.web
      ext.repo = 'NexusSnapshots'
    }
    release(MavenPublication) {
      artifactId artifact
      from components.web
      ext.repo = 'NexusReleases'
    }
  }
}